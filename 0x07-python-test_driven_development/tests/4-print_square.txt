The ``4-print_square`` module
=============================

Using ``print_square`` function
-------------------------------

This is ``4-print_square`` text file in ressstructuredText format.	First import the function from ``4-print_square`` module.

The function uses '#' to print a square

::

	>>> print_square = __import__('4-print_square').print_square

Now use it:

::

	>>> print_square(4)
	####
	####
	####
	####

::

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

::

	>>> print_square(0)

::

	>>> print_square(1)
	#

TypeError is raised if the size is less than zero:

::

	>>> print_square(-1)
	Traceback (most recent call last):
	    ...
	ValueError: size must be >= 0

::

	>>> print_square(-4)
	Traceback (most recent call last):
	    ...
	ValueError: size must be >= 0

TypeError is raised if `size` is float and less than zero:

::

	>>> print_square(-3.0)
	Traceback (most recent call last):
	    ...
	TypeError: size must be an integer

TypeError is also raised if `size` is a float:

::

	>>> print_square(3.0)
	Traceback (most recent call last):
	    ...
	TypeError: size must be an integer

TypeError is also raised if `size` is None:

::

	>>> print_square(None)
	Traceback (most recent call last):
	    ...
	TypeError: size must be an integer

The `size` can not also be passed as string:

::

	>>> print_square("four")
	Traceback (most recent call last):
	    ...
	TypeError: size must be an integer

The argument cannot be missing:

::

	>>> print_square()
	Traceback (most recent call last):
	    ...
	TypeError: print_square() missing 1 required positional argument: 'size'
